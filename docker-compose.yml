version: "3.9"
services:
  redis:
    image: redis:alpine
    container_name: s2t-redis
    volumes:
      - ./redis:/data
    ports:
      - 6379:6379
    logging:
      driver: none
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:12-alpine
    container_name: s2t-db
    volumes:
      - ./db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    command: [ "postgres", "-c", "wal_level=logical" ]
    logging:
      driver: none
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: s2t-kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # kafka debezium postgres connector
  connect:
    image: quay.io/debezium/connect:2.1
    container_name: s2t-connect
    ports:
      - 8083:8083
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER_SCHEMAS_ENABLE=false
      - INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE=false
      - OFFSET_STORAGE_FILE_FILENAME=/tmp/connect.offsets
      - REST_ADVERTISED_HOST_NAME=connect
      - REST_PORT=8083
      - KAFKA_CONNECT_PLUGINS_DIR=/kafka/connect/
    volumes:
      - ./connect:/kafka/connect
    depends_on:
      - kafka
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://connect:8083/"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:  # This service that serves the api for text to speech
    build: ./app
    entrypoint: ./entrypoint.sh
    image: s2t-app
    container_name: s2t-app
    volumes:
      - ./app:/app
    ports:
      - "3030:3030"
    env_file:
      - app/.env
    depends_on:
      - db
      - redis
      - kafka
      - connect
    stdin_open: true # for testing
    tty: true # for testing

  web:  # This service that serves the api for regression and classification
    build: web
    entrypoint: ./entrypoint.sh
    image: s2t-web
    container_name: s2t-web
    volumes:
      - ./web:/app
      - ./connect:/app/connect
    ports:
      - "8000:8000"
      - "3000:3000"
    env_file:
      - web/.env
    depends_on:
      - db
      - redis
      - kafka
      - connect
    stdin_open: true # for testing
    tty: true # for testing
