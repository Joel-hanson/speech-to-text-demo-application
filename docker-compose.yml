version: "3.9"
services:
  redis:
    image: redis:alpine
    container_name: s2t-redis
    volumes:
      - ./redis:/data
    ports:
      - 6379:6379
    logging:
      driver: none
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: s2t-rabbitmq
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    logging:
      driver: none
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:12-alpine
    container_name: s2t-db
    volumes:
      - ./db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    command: [ "postgres", "-c", "wal_level=logical" ]
    logging:
      driver: none
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:  # This service that serves the api for regression and classification
    build: web
    entrypoint: ./entrypoint.sh
    image: s2t-web
    container_name: s2t-web
    volumes:
      - ./web:/app
    ports:
      - "8000:8000"
      - "3000:3000"
    env_file:
      - web/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    stdin_open: true # for testing
    tty: true # for testing


  speech-service:  # This service that serves the api for text to speech
    build: ./speech-service
    entrypoint: ./entrypoint.sh
    image: s2t-speech-service
    container_name: s2t-speech-service
    volumes:
      - ./speech-service:/app
    ports:
      - "3030:3030"
    env_file:
      - speech-service/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    stdin_open: true # for testing
    tty: true # for testing